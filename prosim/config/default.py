from typing import List, Optional, Union
import yacs.config
from .path_cfg import PATHS as PATHS_CFGS

class Config(yacs.config.CfgNode):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs, new_allowed=True)


CN = Config

CONFIG_FILE_SEPARATOR = ","
# -----------------------------------------------------------------------------
# EXPERIMENT CONFIG
# -----------------------------------------------------------------------------
_C = CN()
# task config can be a list of conifgs like "A.yaml,B.yaml"
_C.SEED = 0
_C.TASK_CONFIG = CN()  # task_config will be stored as a config node
_C.CMD_TRAILING_OPTS = []  # store command line options as list of strings
_C.TRAINER_NAME = "default"

_C.EXPERIMENT_DIR = "debug"
_C.EXPERIMENT_NAME = "pipeline"
_C.TENSORBOARD_DIR = "tensorboard"
_C.WANDB_PROJ = "test"
_C.GPU = None # GPU id (-1 if use CPU)
_C.SAVE_CHECKPOINT = False

# Number of model updates during training
_C.MAX_EPOCHES = 100
_C.CHECKPOINT_EPOCHES = 15

_C.CHECKPOINT_INTERVAL = 1
_C.VAL_INTERVAL = 5
_C.ENABLE_VIS = True
_C.VIS_INTERVAL = 400
_C.LOG_INTERVAL_STEPS = 1
_C.LIMIT_VAL_BATCHES = 1.0
_C.LIMIT_TRAIN_BATCHES = 1.0
_C.LOAD_CHECKPOINT_MODEL = False
_C.LOAD_CHECKPOINT_TRAINER = False
_C.LOAD_CHECKPOINT_PATH = None
_C.DEBUG = False

# -----------------------------------------------------------------------------
# MODEL CONFIG
# -----------------------------------------------------------------------------
_C.MODEL_NAME = "trafficgen_act_static"

# -----------------------------------------------------------------------------
# TRAIN CONFIG
# -----------------------------------------------------------------------------

_C.TRAIN = CN()
# The split to train on
_C.TRAIN.SPLIT = "train"
_C.TRAIN.BATCH_SIZE = 64
_C.TRAIN.LR = 0.001
_C.TRAIN.OPTIMIZER = 'AdamW' # [Adam, AdamW, SDG]
_C.TRAIN.WEIGHT_DECAY = 0.0004
_C.TRAIN.MOMENTUM = 0.9
_C.TRAIN.NESTEROV = True
_C.TRAIN.USE_GRADSCALER = False

_C.TRAIN.LR_MUL_MODEL = None
_C.TRAIN.LR_MUL_FACTOR = 0.1

_C.TRAIN.SCHEDULER = CN()
_C.TRAIN.SCHEDULER.TYPE = 'MultiStepLR'
_C.TRAIN.SCHEDULER.GAMMA = 0.5
_C.TRAIN.SCHEDULER.STEP = 5
_C.TRAIN.SCHEDULER.T_MAX = None
_C.TRAIN.SCHEDULER.ETA_MIN = 1e-6
_C.TRAIN.SCHEDULER.WARMUP_EPOCHES = 10
_C.TRAIN.SCHEDULER.MILESTONES = [90, 95]
_C.TRAIN.SCHEDULER.WARMUP_STEPS = 2500
_C.TRAIN.SCHEDULER.MAX_STEPS = 228270

_C.TRAIN.SHUFFLE = True
_C.TRAIN.DROP_LAST = True
_C.TRAIN.NUM_WORKERS = 1
_C.TRAIN.USE_AMP = False
_C.TRAIN.USE_BF16 = False

# -----------------------------------------------------------------------------
# VAL CONFIG
# -----------------------------------------------------------------------------
_C.VAL = CN()
# The split to validate on
_C.VAL.SPLIT = "val"
_C.VAL.BATCH_SIZE = 16
_C.VAL.SHUFFLE = False
_C.VAL.DROP_LAST = False
_C.VAL.NUM_WORKERS = 1
_C.VAL.COMPUTE_LOSS = True

# -----------------------------------------------------------------------------
# TEST CONFIG
# -----------------------------------------------------------------------------
_C.TEST = CN()
# The split to test on
_C.TEST.SPLIT = "test"
_C.TEST.BATCH_SIZE = 16
_C.TEST.SHUFFLE = False
_C.TEST.DROP_LAST = False
_C.TEST.NUM_WORKERS = 1
_C.TEST.COMPUTE_LOSS = True

# -----------------------------------------------------------------------------
# ROLLOUT CONFIG
# -----------------------------------------------------------------------------
_C.ROLLOUT = CN()
_C.ROLLOUT.ENABLE = False
_C.ROLLOUT.SPLIT = 'rollout'
_C.ROLLOUT.MODE = 'trajdata' # [trajdata, gpu]
_C.ROLLOUT.PROMPT = 'goal_point'
_C.ROLLOUT.PROMPT_VALUES = None # [0, 1, 2, 3, 4, 5]
_C.ROLLOUT.GT_YAW = False
_C.ROLLOUT.NUM_WORKERS = 1
_C.ROLLOUT.SYNC_DIST = True
_C.ROLLOUT.PARALLEL_NUM = 1
_C.ROLLOUT.REQUEST_METRIC = True

_C.ROLLOUT.INTERVAL_EPOCH = 10
_C.ROLLOUT.WARMUP_EPOCH = 10
_C.ROLLOUT.CONTROL_NUM = 1
_C.ROLLOUT.CENTER_AGENT = 'ego'

_C.ROLLOUT.POLICY = CN()
_C.ROLLOUT.POLICY.MAX_STEPS = 80
_C.ROLLOUT.POLICY.POLICY_START_FRAME = 5
_C.ROLLOUT.POLICY.REPLAN_FREQ = 10
_C.ROLLOUT.POLICY.POLICY_FREQ = 80
_C.ROLLOUT.POLICY.AGENT_NAME = 'ego'
_C.ROLLOUT.POLICY.TOP_K = 1
_C.ROLLOUT.POLICY.TOP_K_TRAIN = 1

_C.ROLLOUT.METRIC = CN()
_C.ROLLOUT.METRIC.CRASH_RATE = CN()
_C.ROLLOUT.METRIC.CRASH_RATE.IOU_THRESHOLD = 0.1
_C.ROLLOUT.METRIC.ROLLOUT_TRAJ = CN()
_C.ROLLOUT.METRIC.ROLLOUT_TRAJ.DIST_THRESHOLD = 5.0

_C.ROLLOUT.VISUALIZE = CN()
_C.ROLLOUT.VISUALIZE.ENABLE = True
_C.ROLLOUT.VISUALIZE.DISTRIBUTED_VIS_NUM = 10
_C.ROLLOUT.VISUALIZE.GIF_INTERVAL = 10
_C.ROLLOUT.VISUALIZE.TRACK_INTERVAL = 10
_C.ROLLOUT.VISUALIZE.FPS = 10
_C.ROLLOUT.VISUALIZE.GIF_FREQ = 1

_C.ROLLOUT.ONLINE_M = 1

# -----------------------------------------------------------------------------
# DATASET CONFIG
# -----------------------------------------------------------------------------
_C.DATASET = CN()
_C.DATASET.TYPE = 'prosim'
_C.DATASET.NO_PROCESSING = False
_C.DATASET.CACHE_MAP = True
_C.DATASET.USE_RASTER_MAP = False
_C.DATASET.SKIP_CACHE_CHECK = False
_C.DATASET.USE_WAYMO_ROAD_EDGE = False
_C.DATASET.USE_MOTION_TAGS = False

_C.DATASET.SOURCE = CN() 
_C.DATASET.SOURCE.TRAIN = ['waymo']
_C.DATASET.SOURCE.VAL = ['waymo']
_C.DATASET.SOURCE.TEST = ['waymo']
_C.DATASET.SOURCE.ROLLOUT = ['waymo']

_C.DATASET.DATA_LIST = CN()
_C.DATASET.DATA_LIST.MODE = 'scene' # [scene, log]
_C.DATASET.DATA_LIST.TRAIN = 'mini_train.txt'
_C.DATASET.DATA_LIST.VAL = 'mini_val.txt'
_C.DATASET.DATA_LIST.TEST = 'mini_val.txt'
_C.DATASET.DATA_LIST.ROLLOUT = 'mini_val.txt'

_C.DATASET.LOAD_VEC_MAP = CN()
_C.DATASET.LOAD_VEC_MAP.TRAIN = False
_C.DATASET.LOAD_VEC_MAP.VAL = False
_C.DATASET.LOAD_VEC_MAP.TEST = False
_C.DATASET.LOAD_VEC_MAP.ROLLOUT = True

_C.DATASET.REMOVE_PARKED = CN()
_C.DATASET.REMOVE_PARKED.TRAIN = False
_C.DATASET.REMOVE_PARKED.VAL = False
_C.DATASET.REMOVE_PARKED.TEST = False
_C.DATASET.REMOVE_PARKED.ROLLOUT = False

_C.DATASET.USE_ALL_AGENTS = True
_C.DATASET.USE_PED_CYCLIST = True

_C.DATASET.USE_EGO_CENTER = CN()
_C.DATASET.USE_EGO_CENTER.TRAIN = True
_C.DATASET.USE_EGO_CENTER.VAL = True
_C.DATASET.USE_EGO_CENTER.TEST = True
_C.DATASET.USE_EGO_CENTER.ROLLOUT = True

_C.DATASET.SCENE = CN()
# _C.DATASET.SCENE.RANDOM_TRAIN_SAMPLE = True
_C.DATASET.SCENE.SAMPLE_RATE = CN()
_C.DATASET.SCENE.SAMPLE_RATE.TRAIN = 1
_C.DATASET.SCENE.SAMPLE_RATE.VAL = 1
_C.DATASET.SCENE.SAMPLE_RATE.TEST = 1
_C.DATASET.SCENE.SAMPLE_RATE.ROLLOUT = 1

_C.DATASET.AGENT = CN()
_C.DATASET.AGENT.SCENE_MAX_AGENT = 128
_C.DATASET.AGENT.SCENE_MIN_AGENT_SAMPLE = 32
_C.DATASET.AGENT.BATCH_MAX_AGENT = 3000
_C.DATASET.AGENT.SAMPLE_MODE = 'batch' # scene, batch
_C.DATASET.AGENT.RANDOM_TRAIN_SAMPLE = True
_C.DATASET.AGENT.RANDOM_VAL_SAMPLE = False
_C.DATASET.AGENT.USE_SAMPLE = CN()
_C.DATASET.AGENT.USE_SAMPLE.TRAIN = True
_C.DATASET.AGENT.USE_SAMPLE.VAL = False
_C.DATASET.AGENT.USE_SAMPLE.TEST = False
_C.DATASET.AGENT.USE_SAMPLE.ROLLOUT = False
_C.DATASET.AGENT.EGO_ONLY = CN()
_C.DATASET.AGENT.EGO_ONLY.TRAIN = False
_C.DATASET.AGENT.EGO_ONLY.VAL = False
_C.DATASET.AGENT.EGO_ONLY.TEST = False
_C.DATASET.AGENT.EGO_ONLY.ROLLOUT = False

_C.DATASET.MAP = CN()
_C.DATASET.MAP.COLLATE_MODE = 'type' # [type, lane]
_C.DATASET.MAP.RANGE = CN()
_C.DATASET.MAP.RANGE.TRAIN = 200
_C.DATASET.MAP.RANGE.VAL = 200
_C.DATASET.MAP.RANGE.TEST = 200
_C.DATASET.MAP.RANGE.ROLLOUT = 200
_C.DATASET.MAP.CENTER_SAMPLE_RATE = 2
_C.DATASET.MAP.EDGE_SAMPLE_RATE = 2
_C.DATASET.MAP.MAX_LANE_POINTS = 40
_C.DATASET.MAP.INCLUDE_TYPES = ['center', 'left_edge', 'right_edge']

_C.DATASET.MOTION = CN()
_C.DATASET.MOTION.DT = 0.1
_C.DATASET.MOTION.HISTORY_SEC = 1.0
_C.DATASET.MOTION.FUTURE_SEC = CN()
_C.DATASET.MOTION.FUTURE_SEC.TRAIN = 8.0
_C.DATASET.MOTION.FUTURE_SEC.VAL = 8.0
_C.DATASET.MOTION.FUTURE_SEC.TEST = 8.0
_C.DATASET.MOTION.FUTURE_SEC.ROLLOUT = 8.0

_C.DATASET.FORMAT = CN()

_C.DATASET.FORMAT.SYM_COORD = CN()
_C.DATASET.FORMAT.SYM_COORD.MAP = False
_C.DATASET.FORMAT.SYM_COORD.OBS = False
_C.DATASET.FORMAT.SYM_COORD.DEBUG = CN()
_C.DATASET.FORMAT.SYM_COORD.DEBUG.EMPTY_COORD = False

_C.DATASET.FORMAT.HISTORY = CN()
_C.DATASET.FORMAT.HISTORY.ELEMENTS = 'x,y' # [x,y,xd,yd,xdd,ydd,s,c]
_C.DATASET.FORMAT.HISTORY.STEPS = 11
_C.DATASET.FORMAT.HISTORY.WITH_EXTEND = True
_C.DATASET.FORMAT.HISTORY.WITH_AGENT_TYPE = False
_C.DATASET.FORMAT.HISTORY.WITH_TIME_EMB = False

_C.DATASET.FORMAT.TARGET = CN()
_C.DATASET.FORMAT.TARGET.ELEMENTS = 'x,y' # [x,y,xd,yd,xdd,ydd,s,c]
_C.DATASET.FORMAT.TARGET.STEPS = 10
_C.DATASET.FORMAT.TARGET.SAMPLE_RATE = 10
_C.DATASET.FORMAT.TARGET.TAIL_PADDING = False

_C.DATASET.FORMAT.TYPES = CN()
_C.DATASET.FORMAT.TYPES.INIT_MAP = 'center_vec'
_C.DATASET.FORMAT.TYPES.INIT_OBS = 'center_history'
_C.DATASET.FORMAT.TYPES.IO_PAIR = 'center_single_step'

_C.DATASET.FORMAT.FUTURE_OBS_TYPE = 'latest' # full, latest, diff
_C.DATASET.FORMAT.FUTURE_OBS_UPDATE_CENTER = True

_C.DATASET.FORMAT.MAP = CN()
_C.DATASET.FORMAT.MAP.LOCAL_RANGE = 200
_C.DATASET.FORMAT.MAP.MAX_POINTS = 2304
_C.DATASET.FORMAT.MAP.WITH_DIR = False
_C.DATASET.FORMAT.MAP.WITH_TYPE_EMB = False

_C.DATASET.FORMAT.GOAL = CN()
_C.DATASET.FORMAT.GOAL.ELEMENTS = 'x,y' # [x,y,xd,yd,xdd,ydd,s,c]
_C.DATASET.FORMAT.GOAL.LOCAL = True

_C.DATASET.FORMAT.GOAL.AUGMENTATION = CN()
_C.DATASET.FORMAT.GOAL.AUGMENTATION.ENABLE = False
_C.DATASET.FORMAT.GOAL.AUGMENTATION.RATE = 0.1

# -----------------------------------------------------------------------------
# TASK CONFIG
# -----------------------------------------------------------------------------
_C.TASK = CN()
_C.TASK.TYPES = ['ego_plan'] # 'ego_plan', 'motion_pred'

_C.TASK.EGO_PLAN = CN()
_C.TASK.EGO_PLAN.PROMPT = 'ego_state'
_C.TASK.EGO_PLAN.TARGET = 'ego_traj'
_C.TASK.EGO_PLAN.METRICS = ['ego_traj_pred']
_C.TASK.EGO_PLAN.LOSS = 'ego_mse_k' 
_C.TASK.EGO_PLAN.WEIGHT = 1.0

_C.TASK.MOTION_PRED = CN()
_C.TASK.MOTION_PRED.PROMPT = 'agent_pos'
_C.TASK.MOTION_PRED.TARGET = 'all_traj'
_C.TASK.MOTION_PRED.METRICS = ['pair_traj_pred']
_C.TASK.MOTION_PRED.LOSS = 'paired_mse_k'
_C.TASK.MOTION_PRED.WEIGHT = 1.0

_C.TASK.GOAL_COND = CN()
_C.TASK.GOAL_COND.PROMPT = 'goal_point'
_C.TASK.GOAL_COND.TARGET = 'all_traj'
_C.TASK.GOAL_COND.METRICS = ['pair_traj_pred']
_C.TASK.GOAL_COND.LOSS = 'paired_mse_k'
_C.TASK.GOAL_COND.WEIGHT = 1.0

_C.TASK.INST_COND = CN()
_C.TASK.INST_COND.PROMPT = 'instruct'
_C.TASK.INST_COND.TARGET = 'all_traj'
_C.TASK.INST_COND.METRICS = ['pair_traj_pred']
_C.TASK.INST_COND.LOSS = 'paired_mse_k'
_C.TASK.INST_COND.WEIGHT = 1.0

# -----------------------------------------------------------------------------
# PROMPT CONFIG
# -----------------------------------------------------------------------------
_C.PROMPT = CN()

_C.PROMPT.AGENT_STATUS = CN()
_C.PROMPT.AGENT_STATUS.USE_VEL = True
_C.PROMPT.AGENT_STATUS.USE_EXTEND = True
_C.PROMPT.AGENT_STATUS.USE_AGENT_TYPE = True

_C.PROMPT.CONDITION = CN()

_C.PROMPT.CONDITION.TYPES = [] # 'goal', 'v_action_tag', 'motion_tag_text', 'drag_points', 'v2v_tags'

_C.PROMPT.CONDITION.EVAL_COND_SETS = [] # 'goal_1.0', 'dragpoint_1.0', 'v_action_tag_1.0', 'goal_dragpoint_0.25'...

_C.PROMPT.CONDITION.USE_PRIORITY_MASK = False
_C.PROMPT.CONDITION.SAMPLE_BEFORE_PRIORITY = True
_C.PROMPT.CONDITION.USE_SOFT_PRIORITY = False
_C.PROMPT.CONDITION.PRIORITY_ORDER = ['llm_text_OneText', 'v_action_tag', 'goal', 'drag_point']
_C.PROMPT.CONDITION.PRIORITY_SCORES = CN()
_C.PROMPT.CONDITION.PRIORITY_SCORES.llm_text_OneText = 50.0
_C.PROMPT.CONDITION.PRIORITY_SCORES.v_action_tag = 10.0
_C.PROMPT.CONDITION.PRIORITY_SCORES.goal = 5.0
_C.PROMPT.CONDITION.PRIORITY_SCORES.drag_point = 1.0

_C.PROMPT.CONDITION.GOAL = CN()

_C.PROMPT.CONDITION.OneText = CN()
_C.PROMPT.CONDITION.OneText.SHUFFLE_TEXT = False
_C.PROMPT.CONDITION.OneText.USE_PLACEHOLDER = False

_C.PROMPT.CONDITION.MOTION_TAG = CN()
_C.PROMPT.CONDITION.MOTION_TAG.USED_TAGS = ['KeepSpeed']

_C.PROMPT.CONDITION.MOTION_TAG.USE_PROCESSING = False
_C.PROMPT.CONDITION.MOTION_TAG.INTEGRATE_TOLERANCE = 20
_C.PROMPT.CONDITION.MOTION_TAG.MIN_DURATION = 10

_C.PROMPT.CONDITION.MOTION_TAG_TEXT = CN()
_C.PROMPT.CONDITION.MOTION_TAG_TEXT.USE_AGENT_NAME = False
_C.PROMPT.CONDITION.MOTION_TAG_TEXT.REPHRASE_IDX  = CN()
_C.PROMPT.CONDITION.MOTION_TAG_TEXT.REPHRASE_IDX.TRAIN = [0, 10]
_C.PROMPT.CONDITION.MOTION_TAG_TEXT.REPHRASE_IDX.VAL = [0, 10]
_C.PROMPT.CONDITION.MOTION_TAG_TEXT.REPHRASE_IDX.TEST = [10, 20]
_C.PROMPT.CONDITION.MOTION_TAG_TEXT.REPHRASE_IDX.ROLLOUT = [10, 20]

_C.PROMPT.CONDITION.DRAG_POINTS = CN()
_C.PROMPT.CONDITION.DRAG_POINTS.POINT_SAMPLE_RATE = 5
_C.PROMPT.CONDITION.DRAG_POINTS.RANDOM_SUBSET = True
_C.PROMPT.CONDITION.DRAG_POINTS.MIN_SUBSET_LEN = 5
_C.PROMPT.CONDITION.DRAG_POINTS.RANDOM_NOISE = 0.1

_C.PROMPT.CONDITION.SAMPLING = CN()

_C.PROMPT.CONDITION.MAX_COND_PER_BATCH = None
_C.PROMPT.CONDITION.MAX_COND_PER_SCENE = None
_C.PROMPT.CONDITION.SAMPLE_RATE = 0.5

_C.PROMPT.CONDITION.SAMPLE_MODE = CN()
_C.PROMPT.CONDITION.SAMPLE_MODE.TRAIN = 'none' # 'uniform', 'fix_sample_rate', 'normal_sample_rate', 'none'
_C.PROMPT.CONDITION.SAMPLE_MODE.VAL = 'none'
_C.PROMPT.CONDITION.SAMPLE_MODE.TEST = 'none'
_C.PROMPT.CONDITION.SAMPLE_MODE.ROLLOUT = 'none'

_C.PROMPT.CONDITION.RANDOM_SAMPLE = CN()
_C.PROMPT.CONDITION.RANDOM_SAMPLE.TRAIN = True
_C.PROMPT.CONDITION.RANDOM_SAMPLE.VAL = False
_C.PROMPT.CONDITION.RANDOM_SAMPLE.TEST = False
_C.PROMPT.CONDITION.RANDOM_SAMPLE.ROLLOUT = False


# -----------------------------------------------------------------------------
# LOSS CONFIG
# -----------------------------------------------------------------------------
_C.LOSS = CN()

_C.LOSS.TRAJ_CRITERION = CN()
_C.LOSS.TRAJ_CRITERION.TYPE = 'mse' # [mse, huber]
_C.LOSS.TRAJ_CRITERION.HUBER_DELTA = 1.0

_C.LOSS.GOAL_DIST_PRED = CN()
_C.LOSS.GOAL_DIST_PRED.ENABLE = False
_C.LOSS.GOAL_DIST_PRED.WEIGHT = 1.0
_C.LOSS.GOAL_DIST_PRED.MIN_FUT_STEP = 1
_C.LOSS.GOAL_DIST_PRED.CLS_WEIGHT = 10.0
_C.LOSS.GOAL_DIST_PRED.VAR_WEIGHT = 0.0

_C.LOSS.USE_CLS_TRAJ = False

_C.LOSS.STEP_TRAJ = CN()
_C.LOSS.STEP_TRAJ.ENABLE = True
_C.LOSS.STEP_TRAJ.POS_WEIGHT = 1.0
_C.LOSS.STEP_TRAJ.CLS_WEIGHT = 1.0
_C.LOSS.STEP_TRAJ.HEAD_WEIGHT = 0.5
_C.LOSS.STEP_TRAJ.VEL_WEIGHT = 0.5

_C.LOSS.ROLLOUT_TRAJ = CN()
_C.LOSS.ROLLOUT_TRAJ.ENABLE = False 
_C.LOSS.ROLLOUT_TRAJ.WEIGHT = 1.0
_C.LOSS.ROLLOUT_TRAJ.VEL_WEIGHT = 1.0
_C.LOSS.ROLLOUT_TRAJ.HEAD_WEIGHT = 1000.0

_C.LOSS.ROLLOUT_TRAJ.USE_OFFROAD_LOSS = False
_C.LOSS.ROLLOUT_TRAJ.OFFROAD_WEIGHT = 1.0
_C.LOSS.ROLLOUT_TRAJ.OFFROAD_T_SAMPLE_RATE = 1
_C.LOSS.ROLLOUT_TRAJ.OFFROAD_TGT_MODE = 'any' # 'any', 'temporal_mask', 'agent_mask', 'mse_offroad', 'mse_all'

_C.LOSS.ROLLOUT_TRAJ.USE_COLLISION_LOSS = False
_C.LOSS.ROLLOUT_TRAJ.COLLISION_WEIGHT = 1.0
_C.LOSS.ROLLOUT_TRAJ.COLLISION_T_SAMPLE_RATE = 1
_C.LOSS.ROLLOUT_TRAJ.COLLISION_K = 10
_C.LOSS.ROLLOUT_TRAJ.COLLISION_THRESHOLD = 0.0
_C.LOSS.ROLLOUT_TRAJ.COLLISION_VEHICLE_ONLY = False
_C.LOSS.ROLLOUT_TRAJ.COLLISION_TGT_MODE = 'any' # 'any', 'agent_mask', 'temporal_mask', 'l1'

_C.LOSS.ROLLOUT_TRAJ.USE_GOAL_PRED_LOSS = False
_C.LOSS.ROLLOUT_TRAJ.GOAL_MODEL_LR_SCALE = 1.0
_C.LOSS.ROLLOUT_TRAJ.GOAL_PRED_LOSS_COND_MASK = False
_C.LOSS.ROLLOUT_TRAJ.GOAL_WEIGHT = 1.0

_C.LOSS.ROLLOUT_TRAJ.USE_PROMPT_LOSS = False
_C.LOSS.ROLLOUT_TRAJ.PROMPT_WEIGHT = 1.0


# -----------------------------------------------------------------------------
# MODEL CONFIG
# -----------------------------------------------------------------------------
_C.MODEL = CN()
_C.MODEL.HIDDEN_DIM = 512
_C.MODEL.REL_POS_EDGE_FUNC = 'radius' # 'radius', 'knn'

_C.MODEL.TYPE = 'prosim_base'
_C.MODEL.BPTT = False

# -----------------------------------------------------------------------------
# -- SCENE ENCODER CONFIG -- 
# -----------------------------------------------------------------------------
_C.MODEL.SCENE_ENCODER = CN()
_C.MODEL.SCENE_ENCODER.TYPE = 'scene_mcg'
_C.MODEL.SCENE_ENCODER.DEBUG = CN()
_C.MODEL.SCENE_ENCODER.DEBUG.EMPTY_SCENE = False

_C.MODEL.SCENE_ENCODER.MCG = CN()
_C.MODEL.SCENE_ENCODER.MCG.LAYER = 3

_C.MODEL.SCENE_ENCODER.ATTN = CN()
_C.MODEL.SCENE_ENCODER.ATTN.LEARNABLE_PE = True
_C.MODEL.SCENE_ENCODER.ATTN.PE_NUM_FREQ = 64
_C.MODEL.SCENE_ENCODER.ATTN.NUM_HEAD = 8
_C.MODEL.SCENE_ENCODER.ATTN.NUM_LAYER = 3
_C.MODEL.SCENE_ENCODER.ATTN.DROPOUT = 0.1
_C.MODEL.SCENE_ENCODER.ATTN.FF_DIM = 2048
_C.MODEL.SCENE_ENCODER.ATTN.MAX_NUM_NEIGH = 300
_C.MODEL.SCENE_ENCODER.ATTN.AGENT_RADIUS = 100
_C.MODEL.SCENE_ENCODER.ATTN.SCENE_RADIUS = 50

_C.MODEL.SCENE_ENCODER.MAP_TYPE = 'mlp'
_C.MODEL.SCENE_ENCODER.OBS_TYPE = 'mlp'

_C.MODEL.MAP_ENCODER = CN()
_C.MODEL.MAP_ENCODER.MLP = CN()
_C.MODEL.MAP_ENCODER.MLP.POOL = 'max' # 'mean', 'max', 'none'
_C.MODEL.MAP_ENCODER.POINTNET = CN()
_C.MODEL.MAP_ENCODER.POINTNET.NUM_PRE_LAYERS = 3
_C.MODEL.MAP_ENCODER.POINTNET.NUM_MLP_LAYERS = 5

_C.MODEL.OBS_ENCODER = CN()
_C.MODEL.OBS_ENCODER.MLP = CN()
_C.MODEL.OBS_ENCODER.MLP.POOL = 'max' # 'mean', 'max', 'none'
_C.MODEL.OBS_ENCODER.POINTNET = CN()
_C.MODEL.OBS_ENCODER.POINTNET.NUM_PRE_LAYERS = 1
_C.MODEL.OBS_ENCODER.POINTNET.NUM_MLP_LAYERS = 3

_C.MODEL.OBS_UPDATE = CN()
_C.MODEL.OBS_UPDATE.ATTN_UPDATE = False
_C.MODEL.OBS_UPDATE.FUSION = 'replace' # 'mlp', 'replace'

# -----------------------------------------------------------------------------
# -- PROMPT ENCODER CONFIG -- 
# -----------------------------------------------------------------------------

_C.MODEL.PROMPT_ENCODER = CN()
_C.MODEL.PROMPT_ENCODER.TYPE = 'base'

_C.MODEL.PROMPT_ENCODER.DEBUG = CN()
_C.MODEL.PROMPT_ENCODER.DEBUG.EMPTY_PROMPT = False

_C.MODEL.CONDITION_TRANSFORMER = CN()
_C.MODEL.CONDITION_TRANSFORMER.USE_TEMPORAL_ENCODING = True
_C.MODEL.CONDITION_TRANSFORMER.ATTN_TYPE = 'debug'

_C.MODEL.CONDITION_TRANSFORMER.LR_SCALE = 1.0

_C.MODEL.CONDITION_TRANSFORMER.USE_PLACEHOLDER = True
_C.MODEL.CONDITION_TRANSFORMER.USE_TANH_GATE = True
_C.MODEL.CONDITION_TRANSFORMER.NHEAD = 8
_C.MODEL.CONDITION_TRANSFORMER.NLAYER = 3
_C.MODEL.CONDITION_TRANSFORMER.DROPOUT = 0.1
_C.MODEL.CONDITION_TRANSFORMER.FF_DIM = 16
_C.MODEL.CONDITION_TRANSFORMER.ACTIVATION = 'gelu'
_C.MODEL.CONDITION_TRANSFORMER.COND_POOL_FUNC = 'mean' # 'mean', 'max', 'attn'

_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER = CN()
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.GOAL = CN()

_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.DRAG_POINTS = CN()
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.DRAG_POINTS.NUM_PRE_LAYERS = 1
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.DRAG_POINTS.NUM_MLP_LAYERS = 3

_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT = CN()
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.BASE_MODEL = 'llama' # 'llama', 'bert', 't5', 'clip'
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM = CN()
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.MODEL = 'llama3_8b' # 'llava_7b', 'llama3_8b', 'llama3_8b_instruct'
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.MAX_TXT_LEN = 1024
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.HIDDEN_DIM = 4096
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.DETACH_PROMPT_TOKEN = False
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.USE_PROMPT_TOKEN = False
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.REPLACE_AGENT_TOKEN = False
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.PROMPT_TAIL = True
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.AGENT_TOKEN_MODE = 'add'
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.USE_TEXT_PROMPT_MASK = False

_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.USE_SYSTEM_INSTRUCTION = True
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.ADD_BOS_EOS = True

_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.LORA_LR_SCALE = 1.0
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.ADAPTER_LR_SCALE = 1.0

_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.PROMPT_LOSS = CN()
_C.MODEL.CONDITION_TRANSFORMER.CONDITION_ENCODER.TEXT.LLM.PROMPT_LOSS.PROMPT_MASK_PRED = False

_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN = CN()
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.TYPE = 'llama'

_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.LORA = CN()
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.LORA.ENABLE = False
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.LORA.R = 8
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.LORA.DROPOUT = 0.1
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.LORA.ALPHA = 1.0
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.LORA.EMBEDDING_ONLY = False

_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.QA = CN()
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.QA.QUESTION_TYPE = 'init_vel'# 'goal', 'extend'
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.QA.CONTEXTURAL_QUESTION = False
_C.MODEL.CONDITION_TRANSFORMER.TEXT_ATTN.QA.GT_QUERY = False

_C.MODEL.CONDITION_TRANSFORMER.PE = CN()
_C.MODEL.CONDITION_TRANSFORMER.PE.ENABLE = False
_C.MODEL.CONDITION_TRANSFORMER.PE.MAX_AGENT_NUM = 128
_C.MODEL.CONDITION_TRANSFORMER.PE.SCALE = 1.0

_C.MODEL.CONDITION_TRANSFORMER.CONDITION_LOCATIONS = ['prompt_encoder'] # 'prompt_encoder', 'policy_decoder'

# -----------------------------------------------------------------------------
# -- DECODER CONFIG -- 
# -----------------------------------------------------------------------------

_C.MODEL.DECODER = CN()
_C.MODEL.DECODER.TYPE = 'base' # [mlp, transformer, mcg]

_C.MODEL.DECODER.TRANSFORMER = CN()
_C.MODEL.DECODER.TRANSFORMER.NHEAD = 4
_C.MODEL.DECODER.TRANSFORMER.NLAYER = 2
_C.MODEL.DECODER.TRANSFORMER.DROPOUT = 0.1
_C.MODEL.DECODER.TRANSFORMER.FF_DIM = 2048
_C.MODEL.DECODER.TRANSFORMER.ACTIVATION = 'gelu'

_C.MODEL.DECODER.ATTN = CN()
_C.MODEL.DECODER.ATTN.LEARNABLE_PE = True
_C.MODEL.DECODER.ATTN.PE_NUM_FREQ = 64
_C.MODEL.DECODER.ATTN.NUM_HEAD = 8
_C.MODEL.DECODER.ATTN.NUM_LAYER = 3
_C.MODEL.DECODER.ATTN.DROPOUT = 0.1
_C.MODEL.DECODER.ATTN.FF_DIM = 2048
_C.MODEL.DECODER.ATTN.MAX_NUM_NEIGH = 300
_C.MODEL.DECODER.ATTN.SCENE_RADIUS = 50
_C.MODEL.DECODER.ATTN.PROMPT_RADIUS = 100
_C.MODEL.DECODER.ATTN.PROMPT_CENTER = False

_C.MODEL.DECODER.MLP = CN()

_C.MODEL.DECODER.MCG = CN()
_C.MODEL.DECODER.MCG.LAYER = 5

_C.MODEL.DECODER.GOAL_PRED = CN()
_C.MODEL.DECODER.GOAL_PRED.ENABLE = False
_C.MODEL.DECODER.GOAL_PRED.HEATMAP_PRED = False
_C.MODEL.DECODER.GOAL_PRED.PRED_DIM = 2
_C.MODEL.DECODER.GOAL_PRED.K = 32

_C.MODEL.DECODER.K_PRED = CN()
_C.MODEL.DECODER.K_PRED.QUERY_SOURCE = 'cluster' # 'cluster', 'anchor'
_C.MODEL.DECODER.K_PRED.ATTN_TYPE = 'query_cg' # 'query_cg', 'query_transformer', 'scene', 'none'
_C.MODEL.DECODER.K_PRED.PROMPT_POLICY_FUSION = 'add' # 'add', 'mlp', 'none'
_C.MODEL.DECODER.K_PRED.K = 64

# -----------------------------------------------------------------------------
# -- POLICY CONFIG -- 
# -----------------------------------------------------------------------------

_C.MODEL.POLICY = CN()
_C.MODEL.POLICY.TYPE = 'base'

_C.MODEL.POLICY.RECONSTRUCT = CN()
_C.MODEL.POLICY.RECONSTRUCT.OUTPUT_DIM = 2

_C.MODEL.POLICY.RNN = CN()
_C.MODEL.POLICY.RNN.ENABLE = False

_C.MODEL.POLICY.SCENE_ENCODER = CN()
_C.MODEL.POLICY.SCENE_ENCODER.TYPE = 'scene_mcg'
_C.MODEL.POLICY.SCENE_ENCODER.MCG = CN()
_C.MODEL.POLICY.SCENE_ENCODER.MCG.LAYER = 3
_C.MODEL.POLICY.SCENE_ENCODER.MAP_TYPE = 'mlp'
_C.MODEL.POLICY.SCENE_ENCODER.OBS_TYPE = 'mlp'
_C.MODEL.POLICY.SCENE_ENCODER.DEBUG = CN()
_C.MODEL.POLICY.SCENE_ENCODER.DEBUG.EMPTY_SCENE = False

_C.MODEL.POLICY.ACT_DECODER = CN()
_C.MODEL.POLICY.ACT_DECODER.TYPE = 'mcg'
_C.MODEL.POLICY.ACT_DECODER.RANDOM_NOISE_STD = 0.0

_C.MODEL.POLICY.ACT_DECODER.TRAJ = CN()
_C.MODEL.POLICY.ACT_DECODER.TRAJ.K = 6
_C.MODEL.POLICY.ACT_DECODER.TRAJ.PRED_MODE = 'mlp' # 'anchor', 'mlp', 'cluster'
_C.MODEL.POLICY.ACT_DECODER.TRAJ.PRED_GMM = False
_C.MODEL.POLICY.ACT_DECODER.TRAJ.PRED_VEL = False

_C.MODEL.POLICY.ACT_DECODER.MCG = CN()
_C.MODEL.POLICY.ACT_DECODER.MCG.LAYER = 3

_C.MODEL.POLICY.ACT_DECODER.CONTEXT = CN()
_C.MODEL.POLICY.ACT_DECODER.CONTEXT.PRED_GOAL_AT_EVAL = False
_C.MODEL.POLICY.ACT_DECODER.CONTEXT.GOAL = False
_C.MODEL.POLICY.ACT_DECODER.CONTEXT.GT_GOAL = False
_C.MODEL.POLICY.ACT_DECODER.CONTEXT.EMD = True
_C.MODEL.POLICY.ACT_DECODER.CONTEXT.USE_POSE_EMB = False

_C.MODEL.POLICY.ACT_DECODER.ATTN = CN()
_C.MODEL.POLICY.ACT_DECODER.ATTN.LEARNABLE_PE = True
_C.MODEL.POLICY.ACT_DECODER.ATTN.PE_NUM_FREQ = 64
_C.MODEL.POLICY.ACT_DECODER.ATTN.NUM_HEAD = 8
_C.MODEL.POLICY.ACT_DECODER.ATTN.NUM_LAYER = 3
_C.MODEL.POLICY.ACT_DECODER.ATTN.DROPOUT = 0.1
_C.MODEL.POLICY.ACT_DECODER.ATTN.FF_DIM = 2048
_C.MODEL.POLICY.ACT_DECODER.ATTN.MAX_NUM_NEIGH = 300
_C.MODEL.POLICY.ACT_DECODER.ATTN.AGENT_RADIUS = 100
_C.MODEL.POLICY.ACT_DECODER.ATTN.MAP_RADIUS = 50
_C.MODEL.POLICY.ACT_DECODER.ATTN.POLICY_CENTER = False
_C.MODEL.POLICY.ACT_DECODER.ATTN.NOT_USE_MAP = False

_C.MODEL.POLICY.ACT_DECODER.RNN = CN()
_C.MODEL.POLICY.ACT_DECODER.RNN.NUM_LAYER = 3
_C.MODEL.POLICY.ACT_DECODER.RNN.DROPOUT = 0.1

_C.MODEL.POLICY.ACT_DECODER.TRANSFORMER = CN()
_C.MODEL.POLICY.ACT_DECODER.TRANSFORMER.NUM_LAYER = 3
_C.MODEL.POLICY.ACT_DECODER.TRANSFORMER.NUM_HEAD = 2
_C.MODEL.POLICY.ACT_DECODER.TRANSFORMER.DROPOUT = 0.1
_C.MODEL.POLICY.ACT_DECODER.TRANSFORMER.FF_DIM = 2048
_C.MODEL.POLICY.ACT_DECODER.TRANSFORMER.ACTIVATION = 'gelu'

_C.register_renamed_key

def get_config(
    config_paths: Optional[Union[List[str], str]] = None,
    opts: Optional[list] = None,
    cluster: Optional[str] = 'local',
) -> CN:
    r"""Create a unified config with default values overwritten by values from
    :ref:`config_paths` and overwritten by options from :ref:`opts`.

    Args:
        config_paths: List of config paths or string that contains comma
        separated list of config paths.
        opts: Config options (keys, values) in a list (e.g., passed from
        command line into the config. For example, ``opts = ['FOO.BAR',
        0.5]``. Argument can be used for parameter sweeping or quick tests.
    """
    config = _C.clone()


    config.merge_from_other_cfg(PATHS_CFGS[cluster])

    if config_paths:
        if isinstance(config_paths, str):
            if CONFIG_FILE_SEPARATOR in config_paths:
                config_paths = config_paths.split(CONFIG_FILE_SEPARATOR)
            else:
                config_paths = [config_paths]

        for config_path in config_paths:
            config.merge_from_file(config_path)

    if opts:
        config.CMD_TRAILING_OPTS = config.CMD_TRAILING_OPTS + opts
        config.merge_from_list(config.CMD_TRAILING_OPTS)
    

    if config.MODEL.POLICY.ACT_DECODER.TRAJ.PRED_VEL:
        if 'xd,yd' not in config.DATASET.FORMAT.HISTORY['ELEMENTS']:
            config.DATASET.FORMAT.HISTORY['ELEMENTS'] = config.DATASET.FORMAT.HISTORY['ELEMENTS'] + ',xd,yd'
        
        if 'xd,yd' not in config.DATASET.FORMAT.TARGET['ELEMENTS']:
            config.DATASET.FORMAT.TARGET['ELEMENTS'] = config.DATASET.FORMAT.TARGET['ELEMENTS'] + ',xd,yd'

    config.freeze()
    return config